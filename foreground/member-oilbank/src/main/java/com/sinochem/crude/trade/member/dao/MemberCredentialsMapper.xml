<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sinochem.crude.trade.member.dao.MemberCredentialsMapper">
    <resultMap id="BaseResultMap" type="com.sinochem.crude.trade.member.domain.MemberCredentials">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="member_id" property="memberId" jdbcType="BIGINT"/>
        <result column="credentials_code" property="credentialsCode" jdbcType="VARCHAR"/>
        <result column="audit" property="audit" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap id="ResultMap" type="com.sinochem.crude.trade.member.domain.MemberCredentials">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="member_id" property="memberId" jdbcType="BIGINT"/>
        <result column="credentials_code" property="credentialsCode" jdbcType="VARCHAR"/>
        <result column="audit" property="audit" jdbcType="INTEGER"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="mobile" property="mobile" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, member_id,credentials_code,audit
  </sql>
    <select id="selectByMemberId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    SELECT

    id, member_id,credentials_code,audit
    FROM member_credentials
    WHERE member_id = #{memberId,jdbcType=BIGINT} AND audit != "2"
  </select>

    <select id="getCredentials" parameterType="java.lang.Long" resultMap="ResultMap">
    SELECT
    id, member_id,credentials_code,audit
    FROM member_credentials
    WHERE member_id = #{memberId,jdbcType=BIGINT} and credentials_code = #{code,jdbcType=BIGINT} AND audit != "2"  limit 1
  </select>

    <select id="selectByMemberIdAudited" parameterType="java.lang.Long" resultMap="BaseResultMap">
    SELECT

    id, member_id,credentials_code,audit
    FROM member_credentials
    WHERE member_id = #{memberId,jdbcType=BIGINT} AND audit = "1"
  </select>

    <insert id="insert" parameterType="com.sinochem.crude.trade.member.domain.MemberCredentials">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into member_credentials (member_id,credentials_code,audit)
        values (#{memberId,jdbcType=BIGINT}, #{credentialsCode,jdbcType=VARCHAR}, #{audit,jdbcType=INTEGER})
    </insert>

    <update id="updateAuditById">
    update member_credentials
    set audit = "1"

    where id = #{id,jdbcType=BIGINT}
  </update>

    <update id="updateApplyById">
    update member_credentials
    set audit = "0"

    where id = #{id,jdbcType=BIGINT}
  </update>


    <select id="selectAll" parameterType="java.lang.Long" resultMap="ResultMap">
        SELECT

        mc.id, mc.member_id,credentials_code,audit,m.user_name,ec.mail,e.name
        FROM member_credentials mc
        LEFT JOIN members m on m.id = mc.member_id
        LEFT JOIN enterprise_contact ec on ec.member_id = m.id
        LEFT JOIN enterprises e on e.member_id = m.id
        WHERE 1=1
        <if test="audit != null">
            AND audit = #{audit,jdbcType=INTEGER}
        </if>
        <if test="name != null and name != ''">
            AND m.user_name like concat('%',#{name},'%')
        </if>
        order by mc.id desc
    </select>

    <select id="getById" parameterType="java.lang.Long" resultMap="ResultMap">
    SELECT

    mc.id, member_id,credentials_code,audit,m.user_name,m.email,m.mobile
    FROM member_credentials mc
    LEFT JOIN members m on m.id = mc.member_id
    WHERE 1=1

      AND mc.id = #{id,jdbcType=BIGINT}

    order by mc.id desc
  </select>

    <update id="auditRejectedById">
    update member_credentials
    set audit = "2"

    where id = #{id,jdbcType=BIGINT}
  </update>

    <delete id="deleteAuditById">
    delete FROM member_credentials
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <select id="getRejects" resultMap="BaseResultMap">
    select * from member_credentials mc
    where 1=1
    AND mc.member_id = #{memberId,jdbcType=BIGINT}
    AND mc.audit = 2
  </select>
    <select id="getList" resultMap="BaseResultMap">
        select * from member_credentials mc
        where 1=1
        <include refid="dynamicWhere"/>
    </select>

    <delete id="deleteListByMemberIdAndAudit" >
      delete  from member_credentials where  audit = #{param1} and member_id =#{param2}

    </delete>

    <insert id="insertAll" >
        insert into member_credentials
        <trim prefix="(" suffix=")" suffixOverrides=",">
            member_id,credentials_code,audit
        </trim>
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.memberId,jdbcType=BIGINT},
            #{item.credentialsCode,jdbcType=VARCHAR},
            #{item.audit,jdbcType=INTEGER}
            )
        </foreach>

    </insert>

    <select id="queryEnterpriseCredential" resultMap="BaseResultMap">
         select * from member_credentials mc
        where   credentials_code = #{code} and member_id = (select member_id from member_credentials where id = #{id})
    </select>


    <sql id="dynamicWhere">
        <if test="memberId != null">
           AND mc.member_id = #{memberId}
        </if>
        <if test="credentialsCode != null and credentialsCode != ''">
           AND mc.credentials_code = #{credentialsCode}
        </if>
    </sql>
</mapper>